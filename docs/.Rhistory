# Run the following code to create a plot of cumulative cases over time
# (we'll explain the ggplot2 syntax next week)
cases_plot <- ggplot(data = national) +
geom_line(mapping = aes(x = as.Date(date), y = cases)) +
labs(x = "Date", y = "Cumulative Cases", title = "U.S. COVID Cases")
# R code chunk in an R Markdown file
source("analysis.R")
# R code chunk in an R Markdown file
source("analysis.R")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library("ggplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds)
View(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = blue))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = BLUE))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = "red"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = "blue"))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price, y = price, fill = clarity))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price, y = price, fill = clarity))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(
mapping = aes(x = carat, y= price),
color = "blue"
)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
# from Anchorage Open Data program
set_2 <- read.csv("data/homelessness-count-usa.csv",
stringsAsFactors = FALSE
) %>%
rename(coc_name = CoC.Name,
coc_num = CoC.Number,
year = Year,
attribute = Attribute.Name,
) %>%
mutate(state = str_sub(coc_num, 1, 2),
coc_cat = "x",
value = as.integer(Value)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
library(dplyr)
library(tidyr)
library(stringr)
# from Anchorage Open Data program
set_2 <- read.csv("data/homelessness-count-usa.csv",
stringsAsFactors = FALSE
) %>%
rename(coc_name = CoC.Name,
coc_num = CoC.Number,
year = Year,
attribute = Attribute.Name,
) %>%
mutate(state = str_sub(coc_num, 1, 2),
coc_cat = "x",
value = as.integer(Value)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
setwd("..")
getwd()
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03")
getwd()
# this only needed to be done once to create combined dataset. started by
# loading and organizing data for merge
# from Georgia Geospacial Information Office
set_1 <- read.csv("data/pit-homeless-by-coc.csv", stringsAsFactors = FALSE) %>%
rename(coc_name = L0Continuum_of_Care_Grantee_Are,
coc_num = COCNUM,
coc_cat = COCCAT,
) %>%
gather(key = attribute,
value = "value_text",
-coc_name, -coc_num, -coc_cat, -"OBJECTID", -Merger_flag, -COCNAME,
-SHAPE_Length, -SHAPE_Area
) %>%
mutate(year = paste0("20", str_sub(attribute, -2)),
state = str_sub(coc_num, 1, 2),
value = as.integer(value_text)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
# from Anchorage Open Data program
set_2 <- read.csv("data/homelessness-count-usa.csv",
stringsAsFactors = FALSE
) %>%
rename(coc_name = CoC.Name,
coc_num = CoC.Number,
year = Year,
attribute = Attribute.Name,
) %>%
mutate(state = str_sub(coc_num, 1, 2),
coc_cat = "x",
value = as.integer(Value)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
# from Kaggle, user def love(x)
set_3 <- read.csv("data/homelessness-2007-2016.csv",
stringsAsFactors = FALSE
) %>%
rename(coc_name = CoC.Name,
coc_num = CoC.Number,
attribute = Measures,
) %>%
filter(!is.na(Count)) %>%
mutate(year = substr(Year, 5, 8),
state = str_sub(coc_num, 1, 2),
coc_cat = "x",
value = as.integer(str_replace_all(Count, ",", ""))
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
View("data/pit-homeless-by-coc.csv")
file <- read.csv("data/pit-homeless-by-coc.csv", header = TRUE, stringsAsFactors = FALSE)
View(file)
# this only needed to be done once to create combined dataset. started by
# loading and organizing data for merge
# from Georgia Geospacial Information Office
set_1 <- read.csv("data/pit-homeless-by-coc.csv", stringsAsFactors = FALSE) %>%
rename(coc_name = L0Continuum_of_Care_Grantee_Are,
coc_num = COCNUM,
coc_cat = COCCAT,
) %>%
gather(key = attribute,
value = "value_text",
-coc_name, -coc_num, -coc_cat, -"ï..OBJECTID", -Merger_flag, -COCNAME,
-SHAPE_Length, -SHAPE_Area
) %>%
mutate(year = paste0("20", str_sub(attribute, -2)),
state = str_sub(coc_num, 1, 2),
value = as.integer(value_text)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/summary.R")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(knitr)
source("../source/line_chart.R")
plot(line_chart)
source("../source/bar_chart.R")
plot(final_bar_chart)
``` {r, echo = FALSE, message = FALSE, include = FALSE}
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/Scatter_Plot.R")
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03")
homelessness <- read.csv("../data/homelessness-2007-2016.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03")
homelessness <- read.csv("data/homelessness-2007-2016.csv", stringsAsFactors = FALSE)
#Create data for NY and WA total homeless count from 2007-2016
the_homeless <- homelessness %>%
group_by (Year, State) %>%
filter(State == "WA" || State == "NY") %>%
summarise(Count = sum(as.numeric(gsub("[,]","", Count), na.rm = TRUE))) %>%
mutate(Year = as.numeric(substring(Year, 5,8)))
#Creating the Scatter Plot
scatter_plot <- ggplot(data = the_homeless) +
geom_point(
mapping = aes(x = Year, y = Count, color = State), alpha = .9 #size = 3
) +
scale_color_manual(values=c('Purple','Green')
) +
theme(axis.title = element_text(face ="bold", size=13)
) +
labs(
title = "Total Homeless Population of (New York vs. Washington State)",
subtitle = "From 2007 to 2016",
x = "Year",
y = "Total Homeless Count",
color = "Location" +
theme(plot.title = element_text(face ="bold", size=15))
)
``` {r, echo = FALSE, message = FALSE, include = FALSE}
``` {r, echo = FALSE, message = FALSE, include = FALSE}
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/Scatter_Plot.R")
``` {r, echo = FALSE, message = FALSE, include = FALSE}
``` {r, echo = FALSE, message = FALSE}
``` {r, echo = FALSE, message = FALSE, include = FALSE}
``` {r, echo = FALSE, message = FALSE, include = FALSE}
``` {r, echo = FALSE, include = FALSE}
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/docs")
homelessness <- read.csv("../data/homelessness-2007-2016.csv", stringsAsFactors = FALSE)
#Create data for NY and WA total homeless count from 2007-2016
the_homeless <- homelessness %>%
group_by (Year, State) %>%
filter(State == "WA" || State == "NY") %>%
summarise(Count = sum(as.numeric(gsub("[,]","", Count), na.rm = TRUE))) %>%
mutate(Year = as.numeric(substring(Year, 5,8)))
#Creating the Scatter Plot
scatter_plot <- ggplot(data = the_homeless) +
geom_point(
mapping = aes(x = Year, y = Count, color = State), alpha = .9 #size = 3
) +
scale_color_manual(values=c('Purple','Green')
) +
theme(axis.title = element_text(face ="bold", size=13)
) +
labs(
title = "Total Homeless Population of (New York vs. Washington State)",
subtitle = "From 2007 to 2016",
x = "Year",
y = "Total Homeless Count",
color = "Location" +
theme(plot.title = element_text(face ="bold", size=15))
)
``` {r, echo = FALSE, message = FALSE, include = FALSE}
# Set working directory
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source")
getwd()
# Load homelessness data
filename <- "../data/homelessness-2007-2016.csv"
homeless_data <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE)
# This chart will find the total sum of all the homelessness categories in each
# year.
homelessness_by_year <- homeless_data %>%
select(Year, State, Count, Measures) %>%
mutate(year = as.numeric(substring(Year, 5, 8))) %>%
group_by(year) %>%
mutate(population_sum = as.numeric(gsub("[,]","", Count))) %>%
summarize(yearly_total = sum(population_sum, na.rm = TRUE))
line_chart <- ggplot(homelessness_by_year, aes(x = year, y = yearly_total)) +
scale_y_continuous(labels = scales::comma) +
geom_area(
color = "black",
alpha = .5,
size = 2,
fill = 8
) +
geom_point(
size = 2,
color = "red"
) +
labs (
title = "Homeless Population in U.S. By Year",
subtitle = "The total homelessness populations from 2007 to 2016",
x = "Year",
y = "Population Sum",
color = "Urbanity"
)
``` {r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(knitr)
source("../source/line_chart.R")
plot(line_chart)
source("../source/bar_chart.R")
``` {r, echo = FALSE, message = FALSE, include = FALSE}
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source")
homelessness <- read.csv("../data/homelessness-2007-2016.csv", stringsAsFactors = FALSE)
#Create data for NY and WA total homeless count from 2007-2016
the_homeless <- homelessness %>%
group_by (Year, State) %>%
filter(State == "WA" || State == "NY") %>%
summarise(Count = sum(as.numeric(gsub("[,]","", Count), na.rm = TRUE))) %>%
mutate(Year = as.numeric(substring(Year, 5,8)))
#Creating the Scatter Plot
scatter_plot <- ggplot(data = the_homeless) +
geom_point(
mapping = aes(x = Year, y = Count, color = State), alpha = .9 #size = 3
) +
scale_color_manual(values=c('Purple','Green')
) +
theme(axis.title = element_text(face ="bold", size=13)
) +
labs(
title = "Total Homeless Population of (New York vs. Washington State)",
subtitle = "From 2007 to 2016",
x = "Year",
y = "Total Homeless Count",
color = "Location" +
theme(plot.title = element_text(face ="bold", size=15))
)
``` {r, echo = FALSE, message = FALSE, include = FALSE}
``` {r, echo = FALSE, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(knitr)
source("../source/Scatter_Plot.R")
plot(scatter_plot)
source("../source/summary.R")
source("../source/aggregate_table.R")
source("../source/aggregate_table.R")
library(dplyr)
library(tidyr)
library(stringr)
library(knitr)
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/aggregate_table.R")
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/")
# loading combined dataset
combined_homeless <- read.csv("data/combined_homeless.csv",
stringsAsFactors = FALSE
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
# specific data to use
percent_sheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Sheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lead(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_sheltered = mean(percent))
percent_unsheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lag(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_unsheltered = mean(percent))
# combined and cleaned to display
sheltered_unsheltered_by_state <- full_join(percent_sheltered,
percent_unsheltered,
by = "state"
) %>%
mutate(sheltered = paste0(round(100 * avg_sheltered, digits = 1), "%"),
unsheltered = paste0(round(100 * avg_unsheltered, digits = 1), "%")
) %>%
select(state, sheltered, unsheltered)
source("../source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/bar_chart.R")
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/Scatter_Plot.R")
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/aggregate_table.R")
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/summary.R")
setwd("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/docs")
file <- read.csv("../data/pit-homeless-by-coc.csv", header = TRUE, stringsAsFactors = FALSE)
# this only needed to be done once to create combined dataset. started by
# loading and organizing data for merge
# from Georgia Geospacial Information Office
set_1 <- read.csv("data/pit-homeless-by-coc.csv", stringsAsFactors = FALSE) %>%
rename(coc_name = L0Continuum_of_Care_Grantee_Are,
coc_num = COCNUM,
coc_cat = COCCAT,
) %>%
gather(key = attribute,
value = "value_text",
-coc_name, -coc_num, -coc_cat, -"ï..OBJECTID", -Merger_flag, -COCNAME,
-SHAPE_Length, -SHAPE_Area
) %>%
mutate(year = paste0("20", str_sub(attribute, -2)),
state = str_sub(coc_num, 1, 2),
value = as.integer(value_text)
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/summary.R")
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/line_chart.R")
source("../source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
source("C:/Users/Samira Shirazy/Desktop/final-project-starter-eolshan03/source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
source("../source/aggregate_table.R")
source("../source/summary.R")
View(sheltered_unsheltered_by_state)
source("../source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
source("../source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
source("../source/aggregate_table.R")
kable(sheltered_unsheltered_by_state)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
# Load necessary libraries
library(knitr)
View(percent_sheltered)
