too_expensive <- total_cost > 1000
print(too_expensive)
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 150
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
print(too_expensive)
max_puppies <- 1000 / puppy_price
# Create a variable `my_name` that contains your name
my_name <- "Rebecca"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
nchar(my_name)
name_length <- nchar(my_name)
print(name_lenth)
now_doing <- paste(my_name, "is programming")
toupper <- now_doing
toupper(now_doing)
fav_1 <- 12
fav_2 <- 48
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- mutate(fav_1 / sqrt(201))
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
raw_sum <- sum(fav_1, fav_2)
round_sum <- round(raw_sum)
round_1 <- round(fav_1)
round_2 <- round(fav_2)
sum_round <- sum(round_1, round_2)
max(round_sum, sum_round)
?substr
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 1, 13)
intro <- substr(lyric, 1, 13)
fruits <- substr(lyric, 15, nchar(lyric))
fruits_e <- gsub("a", "e", fruits)
fruits_o <- gsub("a", "o", fruits)
?concat
?c
lyric_e <- intro + fruits_e
lyric_e
lyric_e <- paste(intro, fruits_e)
lyric_e
paste(intro, fruits_o)
a <= 2
b <= 2
if (a == b) {
return a
}
int a <= 2
int b <= 2
if (a = b) {
return a
}
aaa <= 2
bbb <= 2
if (a = b) {
return a
}
a <- 2
b <- 2
if (a = b) {
return a
}
if (a == b) {
return a
}
if (a == b) {
return a;
}
if (a == b) {
return a;
}
if (a == b) {
return a
}
if (a == b) {
return(a)
}
if (a == b) {
print(a)
}
if (a == b) {
print(a)
}
names <- c("Rebecca", "Kacey", "Joey")
print(names)
n <- 10:49
length(n)
print(n + 1)
m <- seq(10, 1, -1)
m - n
x_range <- seq(-5, 10, 0.1)
sin_wave <- sin(x-range)
sin_wave <- sin(x_range)
cos_wave <- cos(x_range)
wave <- ( sin_wave * cos_wave ) + sin_wave
plot(x_range, wave)
my_breakfast <- c("toast", "peanut butter", "coffee")
my_lunch <- c("rice", "fish cakes", "broccoli")
meals <- list(my_breakfast, my_lunch)
my_dinner <- c("pasta", "olives", "garlic bread")
meals[3] <- my_dinner
View(meals)
meals[3] <- c("pasta", "olives", "garlic bread")
install.packages("devtools")
library(fueleconomy)
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
install.packages("dplyr")
library(dplyr)
installed.packages()
library(fueleconomy)
View(vehicles)
manufacturers <- vehicles[vehicles$make]
manufacturers <- vehicles$make
unique_makes <- distinct(vehicles)
View(unique_makes)
manufacturers <- select(vehicles, make)
View(manufacturers)
nrow(distinct(vehicles, make))
cars_1997 <- filter(vehicles, year == 1997)
cars_1997 <- arrange(cars_1997, hwy)
View(cars_1997)
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
View(cars_1997)
two_wheels <- filter(cars_1997, drive == "2-Wheel Drive", cty > 20)
View(two_wheels)
two_wheels <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(two_wheels)
filtered <- filter(two_wheels, hwy == min(hwy))
worst_hwy_mpg <- select(filtered, hwy)
View(worst_hwy_mpg)
most_mpg <- function(year_choice, make_choice) {
cars_select <- filter(vehicles, year == year_choice, make == make_choice)
cars_select <- filter(cars_select, hwy = max(hwy))
print(select(cars_select, model))
}
most_mpg(1995, "Honda")
most_mpg <- function(year_choice, make_choice) {
cars_select <- filter(vehicles, year == year_choice, make == make_choice)
cars_select <- filter(cars_select, hwy == max(hwy))
print(select(cars_select, model))
}
# What was the most efficient Honda model of 1995?
most_mpg(1995, "Honda")
library("dplyr")
library("fueleconomy")
acura_2015 <- filter(vehicles, year == 2015, make == "Acura")
acura_mgh <- filter(vehicles, hwy == max(hwy))
print(select(acura_mgh, model))
acura_2015 <- filter(vehicles, year == 2015, make == "Acura")
acura_mgh <- filter(vehicles, hwy == max(hwy))
best_mgh <- select(acura_mgh, model)
View(best_mgh)
acura_2015 <- filter(vehicles, year == 2015, make == "Acura")
acura_mgh <- filter(acura_2015, hwy == max(hwy))
best_mgh <- select(acura_mgh, model)
View(acura_mgh)
View(best_mgh)
best_mgh <- select(
filter(
filter(vehicles, year == 2015, make == "Acura"),
hwy == max(hwy)
),
model
)
View(best_mgh)
best_mgh <- filter(vehicles, year == 2015, make == "Acura") %>%
filter(hwy == max(hwy)) %>%
select(model)
View(best_mgh)
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
??flights
num_flights <- nrow(flights)
factors <- ncol(flights)
VIew(flights)
View(flights)
flights <- mutate(
flights,
time_changed_flying = (dep_time - sched_dep_time) - (arr_time - sched_arr_time)
)
View(flights)
flights <- arrange(flights, - time_changed_flying)
flights <- mutate(
flights,
time_changed_flying = dep_delay - arr_delay
)
flights <- arrange(flights, - time_changed_flying)
flights <- flights %>%
mutate(time_changed_flying = dep_delay - arr_delay) %>%
arrange(- time_changed_flying)
View(flights)
?hist()
time_gained <- hist(flights%time_changed_flying)
hist(flights%time_changed_flying)
hist(flights[[time_changed_flying]])
hist(flights[time_changed_flying])
time_gained <- flights$time_changed_flying
time_gained <- flights[time_changed_flying]
time_gained <- flights[[time_changed_flying]]
hist(flights$time_changed_flying)
avg_gain_loss <- mean(flights, na.rm = TRUE)
avg_gain_loss <- mean(flights$time_changed_flying, na.rm = TRUE)
sea_flights <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_changed_flying)
View(sea_flights)
sea_avg_gain_loss <- mean(sea_flights$time_changed_flying, na.rm = TRUE)
flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(
avg_jfk_sea <- mean(air_time, na.rm = TRUE),
min_jfk_sea <- min(air_time, na.rm = TRUE),
max_jfk_sea <- max(air_time, na.rm = TRUE)
)
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(
avg_jfk_sea <- mean(air_time, na.rm = TRUE),
min_jfk_sea <- min(air_time, na.rm = TRUE),
max_jfk_sea <- max(air_time, na.rm = TRUE)
)
View(jfk_to_sea)
library("nycflights13")
library("dplyr")
View(flights)
dep_delay_by_month <- flights %>%
group_by(dep_delay) %>%
avg_delay <- mean(dep_delay)
dep_delay_by_month <- flights %>%
group_by(dep_delay) %>%
summarize(avg_delay = mean(dep_delay))
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(avg_delay = mean(dep_delay))
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE))
most_delay <- max(dep_delay_by_month)
plot(dep_delay_by_month)
dep_delay_dest <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE))
View(dep_delay_dest)
dep_delay_dest <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
arrange(-avg_delay)
View(airports)
highest_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-avg_speed)
View(highest_speed)
avg_delay_dest <- flights %>%
group_by(dest) %>%
summarize(delay_by_dest = mean(arr_delay, na.rm = TRUE))
View(avg_delay_dest)
View(airports)
avg_delay_dest <- flights %>%
group_by(dest) %>%
summarize(delay_by_dest = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
airports_new <-airports %>%
left_join(avg_delay_dest, by = "faa") %>%
arrange(-delay_by_dest)
View(airports_new)
View(airlines)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay - mean(arr_delay, na.rm = TRUE)) %>%
right_join(airlines, by = "carrier") %>%
arrange(avg_delay)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
right_join(airlines, by = "carrier") %>%
arrange(avg_delay)
View(avg_delay_airline)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
arrange(avg_delay)
View(avg_delay_airline)
library("nycflights13")
library("dplyr")
setwd("~/stuff/info201/final-project-starter-eolshan03")
combined_homeless <- read.csv("../data/combined_homeless.csv",
stringsAsFactors = FALSE
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
library(dplyr)
library(tidyr)
library(stringr)
library(knitr)
combined_homeless <- read.csv("../data/combined_homeless.csv",
stringsAsFactors = FALSE
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
combined_homeless <- read.csv("data/combined_homeless.csv",
stringsAsFactors = FALSE) %>% select(coc_name, coc_num, state, coc_cat, year, attribute, value)
percent_sheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Sheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lead(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_sheltered = mean(percent))
percent_unsheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lag(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_unsheltered = mean(percent))
sheltered_unsheltered_by_state <- full_join(percent_sheltered,
percent_unsheltered,
by = "state"
) %>%
mutate(sheltered = paste0(round(100 * avg_sheltered, digits = 1), "%"),
unsheltered = paste0(round(100 * avg_unsheltered, digits = 1), "%")
) %>%
select(state, sheltered, unsheltered)
setwd("~/stuff/info201/final-project-starter-eolshan03/docs")
combined_homeless <- read.csv("../data/combined_homeless.csv",
stringsAsFactors = FALSE
) %>%
select(coc_name, coc_num, state, coc_cat, year, attribute, value)
setwd("..")
pwd
getwd()
percent_sheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Sheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lead(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_sheltered = mean(percent))
View(percent_sheltered)
percent_unsheltered <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(per = value / lag(value)) %>%
summarise(percent = sum(per, na.rm = TRUE)) %>%
filter(percent != 0) %>%
mutate(state = str_sub(coc_num, 1, 2)) %>%
group_by(state) %>%
summarise(avg_unsheltered = mean(percent))
View(percent_unsheltered)
sheltered_unsheltered_by_state <- full_join(percent_sheltered,
percent_unsheltered,
by = "state"
) %>%
mutate(sheltered = paste0(round(100 * avg_sheltered, digits = 1), "%"),
unsheltered = paste0(round(100 * avg_unsheltered, digits = 1), "%")
) %>%
select(state, sheltered, unsheltered)
View(sheltered_unsheltered_by_state)
avg_percent_sheltered_2016 <- combined_homeless %>%
filter(year == 2016,
attribute == "Sheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, state, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(percent_sheltered = value / lead(value)) %>%
summarise(avg = sum(percent_sheltered, na.rm = TRUE)) %>%
filter(avg != 0) %>%
summarise(mean(avg, na.rm = TRUE)) %>%
pull("mean(avg, na.rm = TRUE)")
avg_percent_unsheltered_2016 <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, state, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(percent_unsheltered = value / lag(value)) %>%
summarise(avg = sum(percent_unsheltered, na.rm = TRUE)) %>%
filter(avg != 0) %>%
summarise(mean(avg, na.rm = TRUE)) %>%
pull("mean(avg, na.rm = TRUE)")
avg_percent_unsheltered_2016 <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, state, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(percent_unsheltered = value / lag(value)) %>%
summarise(avg = sum(percent_unsheltered, na.rm = TRUE)) %>%
filter(avg != 0) %>%
summarise(mean(avg, na.rm = TRUE)) %>%
pull("mean(avg, na.rm = TRUE)")
summary <- list()
# num_observations is just the total number of observations across the 3
# original sets
summary$num_observations <- nrow(combined_homeless)
# area_highest_total is the CoC with the highest total homeless population
summary$area_highest_total <- combined_homeless %>%
filter(attribute == "Total Homeless" | str_sub(attribute, 1, 3) == "TOT",
coc_name != "Total"
) %>%
filter(value == max(value, na.rm = TRUE)) %>%
pull(coc_name)
# highest_total_state_2018 combines the total populations for each state and
# returns the state with the highest population
summary$highest_total_state_2018 <- combined_homeless %>%
filter(str_sub(attribute, 1, 3) == "TOT",
year == 2018
) %>%
group_by(state) %>%
summarise(total_in_state = sum(value, na.rm = TRUE)) %>%
filter(total_in_state == max(total_in_state)) %>%
pull(state)
# calculates percent shelered in each CoC in 2016 and averages all
summary$avg_percent_sheltered_2016 <- combined_homeless %>%
filter(year == 2016,
attribute == "Sheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, state, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(percent_sheltered = value / lead(value)) %>%
summarise(avg = sum(percent_sheltered, na.rm = TRUE)) %>%
filter(avg != 0) %>%
summarise(mean(avg, na.rm = TRUE)) %>%
pull("mean(avg, na.rm = TRUE)")
# calculates percent shelered in each CoC in 2016 and averages all
summary$avg_percent_unsheltered_2016 <- combined_homeless %>%
filter(year == 2016,
attribute == "Unsheltered Homeless" | attribute == "Total Homeless",
) %>%
select(coc_num, state, attribute, value) %>%
group_by(coc_num) %>%
arrange(attribute, .by_group = TRUE) %>%
mutate(percent_unsheltered = value / lag(value)) %>%
summarise(avg = sum(percent_unsheltered, na.rm = TRUE)) %>%
filter(avg != 0) %>%
summarise(mean(avg, na.rm = TRUE)) %>%
pull("mean(avg, na.rm = TRUE)")
View(summary)
setwd("~/stuff/info201/final-project-starter-eolshan03/docs")
